package main

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramBot struct {
	bot_token string
	db *DataBase
}

func NewBot(token string, db *DataBase) *TelegramBot {
	return &TelegramBot{
		bot_token: token,
		db: db,
	}
}




func (tg *TelegramBot) Bot() {
	bot, err := tgbotapi.NewBotAPI(tg.bot_token)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	log.Printf("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞: %s", bot.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
			userInput := strings.Fields(update.Message.Text)

			if len(userInput) > 0 {
			//–õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è	 –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if userInput[0] == "/start"{
				p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
				if err != nil {
					log.Panic(err.Error())
				}
		
				if p.PlayerTGID != 0 {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à–µ –∏–º—è - %s", p.Name))
					msg.ReplyToMessageID = update.Message.MessageID
					bot.Send(msg) 
					
				}else {
					if len(userInput) == 2 {
						if len(userInput[1]) <= 255 {
							p:= Player{
								Name: userInput[1],
								PlayerTGID: update.Message.From.ID,
								Level: 1,
							}
							tg.db.CreateUser(p)
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! %s",p.Name) )
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}else{
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}
					}else if len(userInput) == 1 {
					p:= Player{
						Name: update.Message.From.FirstName,
						PlayerTGID: update.Message.From.ID,
						Level: 1,
					}
					tg.db.CreateUser(p)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s",p.Name) )
					msg.ReplyToMessageID = update.Message.MessageID
					bot.Send(msg)
				}
				}
				}
				//–õ–æ–≥–∏–∫–∞ –ë–∞–ª–∞–Ω—Å–∞
				if userInput[0] == "/balance" {
					p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
					if err != nil {
						log.Panic(err.Error())
					}
					if p != (Player{}){
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ë–∞–ª–∞–Ω—Å: %s$", strconv.Itoa(p.Money)))
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ—é—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ '/start [–∏–º—è]' ")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}
				}
				//–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
				if userInput[0] == "/work" {
					p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
					if err != nil {
						log.Panic(err.Error())
					}
					if p != (Player{}){
						tg.db.ChangePlayerMoney(p.PlayerTGID,p.Money+10)
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: 10$\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: %s$", strconv.Itoa(p.Money + 10)))
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ—é—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ '/start [–∏–º—è]' ")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}
				}
				//–õ–æ–≥–∏–∫–∞ –∫–∞–∑–∏–Ω–æ
				if userInput[0] == "/casino" {
					if len(userInput) == 2 {
						bet, err := strconv.Atoi(userInput[1])
						if err != nil {
							msg:=tgbotapi.NewMessage(update.Message.Chat.ID, "–°—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!")
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}else {
							p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
							if err != nil {
								log.Panic(err.Error())
							}
							if p != (Player{}){
								if p.Money >= bet {
									s1 := rand.NewSource(time.Now().UnixNano())
								r1 := rand.New(s1)
								chance := r1.Int63n(100)
								if chance >= 60 {
									tg.db.ChangePlayerMoney(p.PlayerTGID,p.Money+bet)
									msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: %s$ (+%s$))", strconv.Itoa(p.Money + bet), userInput[1]))
									msg.ReplyToMessageID = update.Message.MessageID
									bot.Send(msg)
								}else {
									tg.db.ChangePlayerMoney(p.PlayerTGID,p.Money-bet)
									msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: %s$ (-%s$)", strconv.Itoa(p.Money - bet), userInput[1]))
									msg.ReplyToMessageID = update.Message.MessageID
									bot.Send(msg)
								}
								}else{
									msg:= tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
									msg.ReplyToMessageID = update.Message.MessageID
									bot.Send(msg)
								}
							}else {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ—é—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ '/start [–∏–º—è]' ")
								msg.ReplyToMessageID = update.Message.MessageID
								bot.Send(msg)
							}
						}
					}else{
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ '/casino [—Å—Ç–∞–≤–∫–∞]'")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}
				}

				//–õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
				if userInput[0] == "/profile" {
					p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
					if err != nil {
						log.Panic(err.Error())
					}
					if p != (Player{}) {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("üìÑ–ò–º—è: %s\nüíµ–î–µ–Ω—å–≥–∏: %s$\n‚ú®–£—Ä–æ–≤–µ–Ω—å: %s",p.Name, strconv.Itoa(p.Money), strconv.Itoa(p.Level)))
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ—é—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ '/start [–∏–º—è]' ")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}
				}

				//–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –ø–æ –¥–µ–Ω—å–≥–∞–º
				if userInput[0] == "/top" {
					players, err:=tg.db.GetTopPlayerByMoney()
					if err != nil {
						log.Panic(err.Error())
					}
					data := ""
					for i, p := range players{
						data += fmt.Sprintf("%s. %s - %s$\n", strconv.Itoa(i+1), p.Name, strconv.Itoa(p.Money))
					}
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, data)
					msg.ReplyToMessageID = update.Message.MessageID
					bot.Send(msg)
				}
				//–õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ (–°–î–ï–õ–ê–¢–¨ –ö–†–£–ß–ï –ü–û–¢–û–ú, –î–ê)
				if userInput[0] == "/buy" {
					p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
					if err != nil {
						log.Panic(err.Error())
					}
					if p != (Player{}) {
						if len(userInput) == 2 {
							biz_id, err := strconv.Atoi(userInput[1])
							if err != nil || biz_id <= 0 || biz_id > CountOfBusinessType {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞!")
								msg.ReplyToMessageID = update.Message.MessageID
								bot.Send(msg)
							}else{
								d, err := tg.db.GetBusinessTypeById(biz_id)
								if err != nil {
									log.Fatal(err.Error())
								}
								if p.Money >= d.Price {
									err := tg.db.ChangePlayerMoney(p.PlayerTGID, p.Money - d.Price)
									if err != nil {
										msg:= tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
										msg.ReplyToMessageID = update.Message.MessageID
										bot.Send(msg)

									}else{
										err := tg.db.AddBusinessToPlayer(p,biz_id)
										if err != nil {
											msg:= tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
											msg.ReplyToMessageID = update.Message.MessageID
											bot.Send(msg)
										}else{
											msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚úÖ–í—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å: %s!", d.Name))
											msg.ReplyToMessageID = update.Message.MessageID
											bot.Send(msg)
										}
									}
								}else{
									msg:= tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å!")
									msg.ReplyToMessageID = update.Message.MessageID
									bot.Send(msg)
								}
							}
						}else{
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ '/buy [—Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞]' ")
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}
					}else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ—é—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ '/start [–∏–º—è]' ")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}
				}
				//–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∏–∑–Ω–µ—Å–æ–≤ –∏–≥—Ä–æ–∫–∞
				if userInput[0] == "/mybizes" {
					p, err := tg.db.GetPlayerByTGId(update.Message.From.ID)
					if err != nil {
						log.Panic(err.Error())
					}
					if p != (Player{}) {
						b, err := tg.db.GetPlayerBuisnesses(p)
						if err != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}else {
							s := "–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã: \n"
							for i, bi := range b {
								t, err := tg.db.GetBusinessTypeById(bi.Type)
								if err != nil {
									msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
									msg.ReplyToMessageID = update.Message.MessageID
									bot.Send(msg)
								}
								s += fmt.Sprintf("%s. %s - %s —à—Ç.\n", strconv.Itoa(i +1),t.Name,strconv.Itoa(bi.Amount))
							}
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, s)
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}
					}else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ—é—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ '/start [–∏–º—è]' ")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
					}
				}
				//–õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
				if userInput[0] == "/bizes" {
					s := "–ë–∏–∑–Ω–µ—Å—ã: \n"
					for i := 1; i <= CountOfBusinessType; i ++ {
						t, err := tg.db.GetBusinessTypeById(i)
						if err != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
							msg.ReplyToMessageID = update.Message.MessageID
							bot.Send(msg)
						}
						s += fmt.Sprintf("%s\nID:%s\n–°—Ç–æ–∏–º–æ—Å—Ç—å:%s$\n–î–æ—Ö–æ–¥:%s$\n------\n",t.Name,strconv.Itoa(t.Id),strconv.Itoa(t.Price),strconv.Itoa(t.Income))
					}
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, s)
					msg.ReplyToMessageID = update.Message.MessageID
					bot.Send(msg)
				}
				if userInput[0] == "/help" {
					s := "/start - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n/work - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—á–∞—Å—Ç–Ω—ã–µ 10 –¥–æ–ª–ª–∞—Ä–æ–≤\n/buy 'ID' - –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å\n/bizes - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤\n/mybizes - –í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã\n/casino '—Å—Ç–∞–≤–∫–∞' - –°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n----\n–ï—Å–ª–∏ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è —Ç—É—Ç\nhttps://github.com/AndreyFulov/lostbot-go/blob/main/CHANGELOG.md"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, s)
					msg.ReplyToMessageID = update.Message.MessageID
					bot.Send(msg)
				}


				
		}
	}
}
}